import React, { useState, useEffect } from 'react';
import Layout from '../../components/Layout';
import Head from 'next/head';
import UserCard from '../../components/reservations/UserCard';
import Search from '../../components/SVGs/Search';
import API from '../../utilis/API';
import getHeader from '../../utilis/getHeader';
import Loader from '../../components/Loader';
import PaginationElement from '../../components/PaginationElement';
import Link from 'next/link';

const index = () => {

    const [loading, setloading] = useState(false);
    const [villasList, setvillasList] = useState([]);
    const [search, setSearch] = useState('');
    const [filter, setFilter] = useState('Select');

    // For pagination
    const [pageNumber, setPageNumber] = useState(1)
    const [lastPage, setLastPage] = useState();

    const loadPendingVillasList = async () => {

        setloading(true)

        try {
            const header = getHeader()

            const endPoint = search ? `Dashboard/pending/villa/list/${search}?page=${pageNumber}` : search && filter ? `Dashboard/pending/villa/list/${search}/${filter}?page=${pageNumber}` : `Dashboard/pending/villa/list?page=${pageNumber}`

            const { data } = await API.get(endPoint, header)
            setvillasList(data.body.all?.data)
            console.log("pending", data.body.all?.data)

            setFrom(data?.body?.all?.from);
            setTotal(data?.body?.all?.total);
            setLastPage(data?.body?.all?.last_page);

            setloading(false)
        } catch (error) {
            console.log(error);
            setloading(false)
        }

    }


    useEffect(() => {
        loadPendingVillasList()
    }, [search, filter, pageNumber]);


    const filterOptions = [
        {
            label: 'This month',
            value: 'this_month'
        },
        {
            label: 'Previous month',
            value: 'previous_month'
        },
        {
            label: 'Previous three months',
            value: 'previous_three_months'
        },
        {
            label: 'Previous six months',
            value: 'previous_six_months'
        },
        {
            label: 'Last year',
            value: 'last_year'
        },
    ]

    return (
        <>
            <Head>
                <title>Pending Villas</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <Layout title="Pending Villas" slug="Check all villas">
                <section className='mt-5'>
                    <div className='flex gap-x-12 items-center'>
                        <p className='text-lg text-black'>Explore</p>
                        <div className='w-[192px] h-[35px] relative'>
                            <select
                                className='w-full h-full text-sm text-darkBlack appearance-none rounded-[25px] border border-[#EAEDEF] px-5'
                                style={{ boxShadow: '0px 2px 20px #CFD9DF66' }}
                            >
                                {filterOptions.map((item, key) => (
                                    <option
                                        id={item?.value}
                                        onChange={() => setFilter(item?.value)}
                                    >{item?.label}</option>
                                ))}
                            </select>
                            <img src='/img/down.svg' alt="down" className='absolute right-4 top-1/2 -translate-y-1/2 w-[20px] h-[12px]' />
                        </div>
                        <div className='w-[448px] h-[48px] rounded-3xl border overflow-hidden flex justify-between'>
                            <input
                                type="text"
                                placeholder='Search villa by name or ID'
                                className='font-sans text-base text-lightGray h-full pl-5 flex-1 placeholder:font-light'
                                value={search}
                                onChange={(e) => setSearch(e.target.value)}
                            />
                            <button className='w-[90px] h-[48px] rounded-3xl bg-primary flex justify-center items-center'>
                                <Search />
                            </button>
                        </div>
                    </div>
                </section>
                <div className='mt-[50px] overflow-x-auto'>
                    <table className='table-fixed md:w-full rounded-lg w-[750px]' style={{ 'boxShadow': '0px 0px 20px #D7DEE365' }}>
                        <thead >
                            <tr className='bg-[#08488C]'>
                                <th className='py-[11px] text-xs text-white font-light text-start  pl-[36px] w-[200px]'>VILLA NAME</th>
                                <th className='py-[11px] text-xs text-white font-light text-start'>REQUEST ID</th>
                                <th className='py-[11px] text-xs text-white font-light text-start w-[100px]'>CITY</th>
                                <th className='py-[11px] text-xs text-white font-light text-start'>DATE</th>
                                <th className='py-[11px] text-xs text-white font-light text-start'>VENDOR ID</th>
                                <th className='py-[11px] text-xs text-white font-light text-start'>STATUS</th>
                                <th className='py-[11px] text-xs text-white font-light text-start'>ACTION</th>
                            </tr>
                        </thead>
                        <tbody>
                            {villasList.map((item, index) => {
                                return (
                                    <Link href={`/villas/villa_details/${item?.villa_id}`}>
                                        <tr className='border-b last:border-b-0 border-[#EFF3F9] cursor-pointer'>
                                            <td className=' pl-[36px] py-[24px] text-[#54617A]  text-sm font-roboto '>{item?.villa_name}</td>
                                            <td className='  py-[24px] text-[#54617A] font-roboto text-sm'>{item?.request_id}</td>
                                            <td className='  py-[24px] text-[#54617A] font-roboto text-sm '>{item?.city}</td>
                                            <td className='  py-[24px] text-[#54617A] font-roboto text-sm'>{item?.date}</td>
                                            <td className='  py-[24px] text-black font-roboto text-sm'>{item?.vendor_id}</td>
                                            <td className={`  py-[24px] font-medium font-roboto text-sm ${item?.status == 'yes' ? "text-green-500" : "text-[#F52D56]"}`}>{item?.status == 'yes' ? "Approved" : "Pending"}</td>
                                            <td className='  py-[24px] text-[#54617A] font-roboto text-sm cursor-pointer'>
                                                <svg xmlns="http://www.w3.org/2000/svg"
                                                    fill="none"
                                                    viewBox="0 0 24 24"
                                                    stroke-width="1.5"
                                                    stroke="#08488C"
                                                    class="w-6 h-6">
                                                    <path
                                                        stroke-linecap="round"
                                                        stroke-linejoin="round"
                                                        d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10" />
                                                </svg>
                                            </td>
                                        </tr>

                                    </Link>
                                )
                            })}
                        </tbody>
                    </table>
                    {/* Pagination */}
                    <PaginationElement
                        currentPage={pageNumber}
                        callBack={(currentPage) => { setPageNumber(currentPage) }}
                        totalPages={lastPage}
                    />
                </div>
            </Layout>

            {loading && <Loader />}
        </>
    )
}

export default index